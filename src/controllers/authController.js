// C:\reactjs node mongodb\pharmacie-backend\src\controllers\authController.js  

const { User, ConnexionPharmacie } = require('../models/User');
const { generateToken } = require('../utils/tokenUtils');
const { sendResetPasswordEmail, sendPharmacyRequestNotification, sendVerificationEmail } = require('../utils/emailUtils');
const crypto = require('crypto');

/**
 * Inscription d'un nouvel utilisateur (client par d√©faut)
 */
const register = async (req, res) => {
  try {
    const { nom, prenom, email, telephone, motDePasse, adresse, dateNaissance, sexe } = req.body;

    // Validation des champs obligatoires
    if (!nom || !prenom || !email || !telephone || !motDePasse) {
      return res.status(400).json({
        success: false,
        message: 'Tous les champs obligatoires doivent √™tre remplis'
      });
    }

    // V√©rifier si l'utilisateur existe d√©j√†
    const existingUser = await User.findOne({ 
      $or: [{ email }, { telephone }] 
    });

    if (existingUser) {
      return res.status(400).json({
        success: false,
        message: 'Un utilisateur avec cet email ou ce t√©l√©phone existe d√©j√†'
      });
    }

    // Cr√©er un nouvel utilisateur
    const newUser = new User({
      nom,
      prenom,
      email,
      telephone,
      motDePasse,
      adresse,
      dateNaissance,
      sexe,
      role: 'client',
      isActive: true,
      isVerified: false
    });

    // G√©n√©rer un token de v√©rification
    const verificationToken = newUser.generateVerificationToken();
    await newUser.save();

    // Envoyer l'email de v√©rification
    try {
      await sendVerificationEmail(email, verificationToken, `${prenom} ${nom}`);
      console.log('‚úÖ Email de v√©rification envoy√© avec succ√®s');
    } catch (emailError) {
      console.error('‚ùå Erreur envoi email:', emailError);
      // Ne pas faire √©chouer l'inscription si l'email ne part pas
    }

    res.status(201).json({
      success: true,
      message: 'Compte cr√©√© avec succ√®s. V√©rifiez votre email pour activer votre compte.',
      data: {
        userId: newUser._id,
        email: newUser.email,
        nom: newUser.nom,
        prenom: newUser.prenom,
        role: newUser.role,
        isVerified: newUser.isVerified
      }
    });

  } catch (error) {
    console.error('‚ùå Erreur inscription:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de l\'inscription'
    });
  }
};

/**
 * V√©rification de l'email - VERSION AM√âLIOR√âE AVEC DEBUG
 */
/**
 * V√©rification de l'email - VERSION AM√âLIOR√âE AVEC GESTION DU DOUBLE APPEL
 */
const verifyEmail = async (req, res) => {
  try {
    const { token } = req.params;
    
    console.log("üîë =====  D√âBUT V√âRIFICATION EMAIL =====");
    console.log("üîë Token re√ßu c√¥t√© backend:", token);
    console.log("üîë Longueur du token:", token?.length);
    console.log("üîë Type du token:", typeof token);
    
    // V√©rifier que le token existe
    if (!token) {
      console.log("‚ùå Token manquant dans les param√®tres");
      return res.status(400).json({
        success: false,
        message: 'Token de v√©rification manquant'
      });
    }

    // Rechercher l'utilisateur avec ce token
    console.log("üîç Recherche de l'utilisateur dans la base...");
    
    const user = await User.findOne({
      verificationToken: token,
      verificationTokenExpires: { $gt: Date.now() }
    });

    console.log("üë§ Utilisateur trouv√©:", user ? "OUI" : "NON");
    
    if (!user) {
      console.log("‚ö†Ô∏è Aucun utilisateur avec ce token ou token expir√©");
      
      // V√©rifier si l'utilisateur existe d√©j√† mais est d√©j√† v√©rifi√©
      const verifiedUser = await User.findOne({
        verificationToken: token
      });
      
      if (verifiedUser && verifiedUser.isVerified) {
        console.log("‚úÖ Utilisateur d√©j√† v√©rifi√©:", verifiedUser.email);
        return res.status(200).json({
          success: true,
          message: 'Email d√©j√† v√©rifi√©. Votre compte est actif.',
          code: 'ALREADY_VERIFIED'
        });
      }
      
      // V√©rifier si le token existe mais est expir√©
      if (verifiedUser) {
        console.log("‚è∞ Token trouv√© mais expir√© pour:", verifiedUser.email);
        console.log("‚è∞ Expiration:", verifiedUser.verificationTokenExpires);
        console.log("‚è∞ Maintenant:", new Date(Date.now()));
        
        return res.status(400).json({
          success: false,
          message: 'Token de v√©rification expir√©. Veuillez demander un nouveau lien.',
          code: 'TOKEN_EXPIRED'
        });
      }
      
      return res.status(400).json({
        success: false,
        message: 'Token de v√©rification invalide',
        code: 'INVALID_TOKEN'
      });
    }

    console.log("‚úÖ Utilisateur trouv√©:", user.email);
    console.log("üìß Email d√©j√† v√©rifi√©:", user.isVerified);
 
    // V√©rifier si l'email est d√©j√† v√©rifi√©
    if (user.isVerified) {
      console.log("‚ÑπÔ∏è Email d√©j√† v√©rifi√© pour:", user.email);
      return res.status(200).json({
        success: true,
        message: 'Email d√©j√† v√©rifi√©. Votre compte est actif.',
        code: 'ALREADY_VERIFIED'
      });
    }

    // Mettre √† jour l'utilisateur
    console.log("üìù Mise √† jour de l'utilisateur...");
    
    user.isVerified = true;
    user.verificationToken = undefined;
    user.verificationTokenExpires = undefined;
    
    await user.save();
    
    console.log("‚úÖ Utilisateur mis √† jour avec succ√®s");
    console.log("üîë =====  FIN V√âRIFICATION EMAIL =====");

    res.status(200).json({
      success: true,
      message: 'Email v√©rifi√© avec succ√®s. Votre compte est maintenant actif.',
      code: 'VERIFICATION_SUCCESS'
    });

  } catch (error) {
    console.error('‚ùå =====  ERREUR V√âRIFICATION EMAIL =====');
    console.error('‚ùå Type d\'erreur:', error.name);
    console.error('‚ùå Message:', error.message);
    console.error('‚ùå Stack:', error.stack);
    console.error('‚ùå =====  FIN ERREUR =====');
    
    res.status(500).json({
      success: false,
      message: 'Erreur serveur lors de la v√©rification de l\'email',
      code: 'SERVER_ERROR'
    });
  }
};
/**
 * Connexion d'un utilisateur
 */
/**
 * Connexion d'un utilisateur - VERSION CORRIG√âE
 */
/**
 * Connexion d'un utilisateur - VERSION CORRIG√âE ET AM√âLIOR√âE
 */
const login = async (req, res) => {
  try {
    const { email, motDePasse } = req.body;

    // Validation des champs
    if (!email || !motDePasse) {
      return res.status(400).json({
        success: false,
        message: 'Email et mot de passe requis'
      });
    }

    // Trouver l'utilisateur
    const user = await User.findOne({ email });
    if (!user) {
      return res.status(401).json({
        success: false,
        message: 'Email ou mot de passe incorrect'
      });
    }

    // V√©rifier le mot de passe
    const isMatch = await user.comparePassword(motDePasse);
    if (!isMatch) {
      return res.status(401).json({
        success: false,
        message: 'Email ou mot de passe incorrect'
      });
    }

    // V√©rifier si le compte est v√©rifi√©
    if (!user.isVerified) {
      return res.status(401).json({
        success: false,
        message: 'Veuillez v√©rifier votre email avant de vous connecter',
        code: 'EMAIL_NOT_VERIFIED'
      });
    }

    // V√©rifier si le compte est actif
    if (!user.isActive) {
      return res.status(401).json({
        success: false,
        message: 'Compte d√©sactiv√©'
      });
    }

    // Mettre √† jour la derni√®re connexion
    user.lastLogin = new Date();
    await user.save();

    // G√©n√©rer le token
    const token = generateToken(user);

    // ‚úÖ V√âRIFICATION EXPLICITE DU MOT DE PASSE TEMPORAIRE
    const isTemporaryPassword = Boolean(user.motDePasseTemporaire);
    
    console.log('üîë Connexion utilisateur:', {
      email: user.email,
      role: user.role,
      motDePasseTemporaire: isTemporaryPassword,
      rawValue: user.motDePasseTemporaire
    });

    // ‚úÖ R√âPONSE AVEC MOT DE PASSE TEMPORAIRE
    if (isTemporaryPassword) {
      console.log('‚ö†Ô∏è Utilisateur avec mot de passe temporaire:', user.email);
      return res.status(200).json({
        success: true,
        message: 'Connexion avec mot de passe temporaire. Veuillez le changer.',
        motDePasseTemporaire: true, // ‚úÖ Explicitement true
        data: {
          token,
          user: user.getPublicProfile()
        }
      });
    }

    // ‚úÖ R√âPONSE CONNEXION NORMALE
    console.log('‚úÖ Connexion normale pour:', user.email, 'Role:', user.role);
    
    return res.status(200).json({
      success: true,
      message: 'Connexion r√©ussie',
      motDePasseTemporaire: false, // ‚úÖ Explicitement false
      data: {
        token,
        user: user.getPublicProfile()
      }
    });

  } catch (error) {
    console.error('‚ùå Erreur connexion:', error);
    return res.status(500).json({
      success: false,
      message: 'Erreur lors de la connexion'
    });
  }
};

/**
 * Mot de passe oubli√©
 */
const forgotPassword = async (req, res) => {
  try {
    const { email } = req.body;

    if (!email) {
      return res.status(400).json({
        success: false,
        message: 'Email requis'
      });
    }

    const user = await User.findOne({ email });
    if (!user) {
      return res.status(404).json({
        success: false,
        message: 'Aucun utilisateur trouv√© avec cet email'
      });
    }

    // G√©n√©rer un token de r√©initialisation
    const resetToken = crypto.randomBytes(32).toString('hex');
    user.resetPasswordToken = resetToken;
    user.resetPasswordExpires = Date.now() + 3600000; // 1 heure

    await user.save();

    // Envoyer l'email
    try {
      await sendResetPasswordEmail(email, resetToken, `${user.prenom} ${user.nom}`);
      console.log('‚úÖ Email de r√©initialisation envoy√©');
    } catch (emailError) {
      console.error('‚ùå Erreur envoi email reset:', emailError);
      // Continuer m√™me si l'email ne part pas
    }

    res.json({
      success: true,
      message: 'Email de r√©initialisation envoy√©'
    });

  } catch (error) {
    console.error('‚ùå Erreur mot de passe oubli√©:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de l\'envoi de l\'email'
    });
  }
};

/**
 * R√©initialisation du mot de passe
 */
const resetPassword = async (req, res) => {
  try {
    const { token, nouveauMotDePasse } = req.body;

    if (!token || !nouveauMotDePasse) {
      return res.status(400).json({
        success: false,
        message: 'Token et nouveau mot de passe requis'
      });
    }

    if (nouveauMotDePasse.length < 6) {
      return res.status(400).json({
        success: false,
        message: 'Le mot de passe doit contenir au moins 6 caract√®res'
      });
    }

    const user = await User.findOne({
      resetPasswordToken: token,
      resetPasswordExpires: { $gt: Date.now() }
    });

    if (!user) {
      return res.status(400).json({
        success: false,
        message: 'Token invalide ou expir√©'
      });
    }

    // Mettre √† jour le mot de passe
    user.motDePasse = nouveauMotDePasse;
    user.resetPasswordToken = undefined;
    user.resetPasswordExpires = undefined;

    await user.save();

    res.json({
      success: true,
      message: 'Mot de passe r√©initialis√© avec succ√®s'
    });

  } catch (error) {
    console.error('‚ùå Erreur r√©initialisation:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la r√©initialisation'
    });
  }
};

/**
 * Renvoyer l'email de v√©rification - VERSION AM√âLIOR√âE
 */
const resendVerificationEmail = async (req, res) => {
  try {
    const { email } = req.body;

    console.log("üìß Demande de renvoi d'email pour:", email);

    if (!email) {
      return res.status(400).json({
        success: false,
        message: 'Email requis'
      });
    }

    const user = await User.findOne({ email });
    if (!user) {
      console.log("‚ùå Utilisateur non trouv√©:", email);
      return res.status(404).json({
        success: false,
        message: 'Utilisateur non trouv√©'
      });
    }

    if (user.isVerified) {
      console.log("‚ÑπÔ∏è Email d√©j√† v√©rifi√© pour:", email);
      return res.status(400).json({
        success: false,
        message: 'Le compte est d√©j√† v√©rifi√©'
      });
    }

    // G√©n√©rer un nouveau token
    const verificationToken = user.generateVerificationToken();
    await user.save();

    console.log("üîë Nouveau token g√©n√©r√©:", verificationToken);

    // Envoyer l'email
    try {
      await sendVerificationEmail(email, verificationToken, `${user.prenom} ${user.nom}`);
      console.log('‚úÖ Email de v√©rification renvoy√© √†:', email);
    } catch (emailError) {
      console.error('‚ùå Erreur renvoi email:', emailError);
      return res.status(500).json({
        success: false,
        message: 'Erreur lors de l\'envoi de l\'email'
      });
    }

    res.json({
      success: true,
      message: 'Email de v√©rification renvoy√© avec succ√®s'
    });

  } catch (error) {
    console.error('‚ùå Erreur renvoi email:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors du renvoi de l\'email'
    });
  }
};


/**
 * Obtenir le profil utilisateur
 */
const getProfile = async (req, res) => {
  try {
    res.json({
      success: true,
      data: {
        user: req.user.getPublicProfile()
      }
    });
  } catch (error) {
    console.error('‚ùå Erreur r√©cup√©ration profil:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la r√©cup√©ration du profil'
    });
  }
};
const demandeComptePharmacie = async (req, res) => {
  try {
    console.log("üü¢ Fichier re√ßu (req.files):", req.files);
console.log("üü¢ Donn√©es re√ßues (req.body):", req.body);
console.log("üü¢ Utilisateur connect√© (req.user):", req.user);


    const {
      nomPharmacie,
      emailPharmacie,
      telephonePharmacie,
      adresseGoogleMaps
    } = req.body;

    const documentsVerification = req.files['documentsVerification'] || [];
    const photoPharmacieFile = req.files['photoPharmacie']?.[0] || null;

    if (
      !nomPharmacie ||
      !emailPharmacie ||
      !telephonePharmacie ||
      !adresseGoogleMaps ||
      documentsVerification.length === 0
    ) {
      return res.status(400).json({
        success: false,
        message: 'Tous les champs requis doivent √™tre remplis'
      });
    }

    const docs = documentsVerification.map(file => ({
  nomFichier: file.originalname,
  cheminFichier: file.path,
  typeFichier: file.mimetype,
  tailleFichier: file.size,
  dateUpload: new Date()
}));

    const photoPath = photoPharmacieFile?.path || null;

    req.user.demandePharmacie = {
      statutDemande: 'en_attente',
      dateDemande: new Date(),
      informationsPharmacie: {
        nomPharmacie,
        emailPharmacie,
        telephonePharmacie,
        adresseGoogleMaps,
        photoPharmacie: photoPath,
        documentsVerification: docs

      }
    };

    await req.user.save();
  // Notification √† l'admin par email (si d√©finie)
  await sendPharmacyRequestNotification({
  nomPharmacie: req.body.nomPharmacie,
  adresseGoogleMaps: req.body.adresseGoogleMaps,
  nom: req.user.nom,
  prenom: req.user.prenom,
  email: req.user.email,
  telephone: req.user.telephone,
  livraisonDisponible: false // si tu n'as pas encore ce champ, force-le √† false
});


    return res.json({
      success: true,
      message: 'Demande de cr√©ation de pharmacie envoy√©e avec succ√®s',
      data: {
        statutDemande: req.user.demandePharmacie.statutDemande,
        dateDemande: req.user.demandePharmacie.dateDemande
      }
    });

  } catch (error) {
    console.error('‚ùå Erreur demande pharmacie:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la demande',
      error: error.message
    });
  }
};



/**
 * Connexion utilisateur √† une pharmacie (enregistre la connexion)
 */
const connexionPharmacie = async (req, res) => {
  try {
    const { pharmacieId, typeConnexion } = req.body;

    // V√©rifier que la pharmacie existe et est approuv√©e
    const pharmacie = await User.findOne({
      _id: pharmacieId,
      role: 'pharmacie',
      'pharmacieInfo.statutDemande': 'approuvee',
      isActive: true
    });

    if (!pharmacie) {
      return res.status(404).json({
        success: false,
        message: 'Pharmacie non trouv√©e ou non approuv√©e'
      });
    }

    // Enregistrer la connexion
    const connexion = new ConnexionPharmacie({
      utilisateur: req.user._id,
      pharmacie: pharmacieId,
      typeConnexion: typeConnexion || 'consultation',
      informationsUtilisateur: {
        nom: req.user.nom,
        prenom: req.user.prenom,
        email: req.user.email,
        telephone: req.user.telephone,
        adresse: req.user.adresse
      }
    });

    await connexion.save();

    res.json({
      success: true,
      message: 'Connexion √† la pharmacie enregistr√©e',
      data: {
        pharmacie: {
          _id: pharmacie._id,
          nom: pharmacie.nom,
          prenom: pharmacie.prenom,
          nomPharmacie: pharmacie.pharmacieInfo.nomPharmacie,
          adresseGoogleMaps: pharmacie.pharmacieInfo.adresseGoogleMaps,
          livraisonDisponible: pharmacie.pharmacieInfo.livraisonDisponible,
          estDeGarde: pharmacie.pharmacieInfo.estDeGarde,
          heuresOuverture: pharmacie.pharmacieInfo.heuresOuverture
        },
        connexionId: connexion._id
      }
    });

  } catch (error) {
    console.error('‚ùå Erreur connexion pharmacie:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la connexion √† la pharmacie'
    });
  }
};

module.exports = {
  register,
  verifyEmail,
  login,
  demandeComptePharmacie,
  connexionPharmacie,
  forgotPassword,
  resetPassword,
  resendVerificationEmail,
  getProfile
};